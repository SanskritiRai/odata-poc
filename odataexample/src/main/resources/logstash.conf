input {
  beats {
    port => 5044
  }
}
filter {
  #If log line contains tab character followed by 'at' then we will tag that entry as stacktrace
  if [message] =~ "\tat" {
    grok {
      match => ["message", "^(\tat)"]
      add_tag => ["stacktrace"]
    }
  }

  #Grokking Spring Boot's default log format
  grok {
    match => [ "message", 
               "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- \[(?<thread>[A-Za-z0-9-]+)\] [A-Za-z0-9.]*\.(?<class>[A-Za-z0-9#_]+)\s*:\s+(?<logmessage>.*)",
               "message",
               "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- .+? :\s+(?<logmessage>.*)"
             ]
  }

  #Parsing out timestamps which are in timestamp field thanks to previous grok section
  date {
    match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss -0300" ]
    timezone => "UTC"
  }
}
output {
  stdout {
    codec => rubydebug
  }
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
  }
  if [level] == "ERROR" or [level] == "WARN" {
    email {
      to => 'dcairone@eiva.com.ar'
      from => 'dcairone@eiva.com.ar'
      subject => "Alert - %{fields[customer]}"
      body => "Tags: %{tags}\n\\Content:\n%{message}"
      domain => 'eiva.com.ar'
      port => 587
      address => 'mail.eiva.com.ar'
      username => 'dcairone@eiva.com.ar'
      password => 'Diegorv760'
    }
#   file {
#     path => "/config-dir/salida.txt"
#   }
  }  
}
