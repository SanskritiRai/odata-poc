input {
  file {
    type => "java"
    start_position => "beginning"
    ignore_older => 0
    tags => ["odataexample-app", "diego.cairone"]
    add_field => {
      "appID" => "ODATAEXAMPLE"
      "developer" => "diego.cairone"
    }
    path => "/log-file/odataexample-app.log"
    codec => multiline {
      pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
      negate => "true"
      what => "previous"
    }
  }
}
filter {
  #If log line contains tab character followed by 'at' then we will tag that entry as stacktrace
  if [message] =~ "\tat" {
    grok {
      match => ["message", "^(\tat)"]
      add_tag => ["stacktrace"]
    }
  }

  #Grokking Spring Boot's default log format
  grok {
    match => [ "message", 
               "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- \[(?<thread>[A-Za-z0-9-]+)\] [A-Za-z0-9.]*\.(?<class>[A-Za-z0-9#_]+)\s*:\s+(?<logmessage>.*)",
               "message",
               "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- .+? :\s+(?<logmessage>.*)"
             ]
  }

  #Parsing out timestamps which are in timestamp field thanks to previous grok section
  date {
    match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss.SSS" ]
  }
}
output {
  stdout {
    codec => rubydebug
  }
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
  }
  if [level] == "ERROR" or [level] == "WARN" {
    http {
      id => "to_graylog"
      http_method => "post"
      url => "http://192.168.1.222:12202/gelf"
      mapping => {
        "full_message" => "%{message}"
        "short_message" => "%{logmessage}"
        "host" => "%{host}"
        "_logLevel" => "%{level}"
        "_class" => "%{class}"
        "_customer" => "%{fields[customer]}"
        "_appName" => "%{fields[appName]}"
      }
    }
  }  
}
